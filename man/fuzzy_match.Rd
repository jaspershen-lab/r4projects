% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/16-fuzzy_matching.R
\name{fuzzy_match}
\alias{fuzzy_match}
\title{Fuzzy Match Between Two Vectors}
\usage{
fuzzy_match(
  x,
  y,
  method = c("osa", "lv", "dl", "hamming", "lcs", "qgram", "cosine", "jaccard", "jw",
    "soundex"),
  useBytes = FALSE,
  weight = c(d = 1, i = 1, s = 1, t = 1),
  q = 1,
  p = 0,
  bt = 0,
  nthread = getOption("sd_num_thread"),
  sorted_by_score = TRUE
)
}
\arguments{
\item{x}{A character vector.}

\item{y}{Another character vector to be matched against `x`.}

\item{method}{A character string specifying the method to be used for calculating string distance.
Valid options are "osa", "lv", "dl", "hamming", "lcs", "qgram", "cosine", "jaccard", "jw", and "soundex".}

\item{useBytes}{Logical; if `TRUE`, the matching is done byte-by-byte rather than character-by-character.}

\item{weight}{A named numeric vector of weights to be used for the "osa", "lv", and "dl" methods.}

\item{q}{An integer used for the "qgram" method.}

\item{p}{A penalty parameter used in the "jw" method.}

\item{bt}{A breaking tie parameter used in some methods.}

\item{nthread}{The number of threads to use for computation.}

\item{sorted_by_score}{Logical; if `TRUE`, the results are sorted by descending similarity scores.}
}
\value{
A `data.frame` containing the original elements of `x` and `y`, their similarity scores, and index positions.
        If `sorted_by_score` is `TRUE`, the data frame is sorted by the similarity scores in descending order.
}
\description{
This function performs a fuzzy match between two character vectors using various distance methods.
It calculates the similarity scores based on the selected method and returns a data frame of matches
with their corresponding similarity scores. Optionally, the results can be sorted by the similarity scores.
}
\examples{
x <- "apple"
y <- c("ape", "bandana", "berry")
fuzzy_match(x, y, method = "jaccard")

}
